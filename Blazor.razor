@page "/search"
@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components
@inject HttpClient Http

<h3>Search API</h3>

<div>
    <input @bind="searchQuery" placeholder="Enter search query" />
    <button @onclick="Search">Search</button>
</div>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: red;">@errorMessage</p>
}
else if (result != null)
{
    <div>
        <h4>Results:</h4>
        <p>@result</p>
    </div>
}

@code {
    private string searchQuery;
    private string result;
    private bool isLoading;
    private string errorMessage;

    private async Task Search()
    {
        isLoading = true;
        errorMessage = null;
        result = null;

        try
        {
            // Replace "https://api.example.com/search" with your actual API endpoint
            var response = await Http.GetAsync($"https://api.example.com/search?query={searchQuery}");

            response.EnsureSuccessStatusCode();

            // Assuming the API returns a plain text response. Adjust accordingly if it's JSON.
            result = await response.Content.ReadAsStringAsync();
        }
        catch (HttpRequestException e)
        {
            errorMessage = $"Request error: {e.Message}";
        }
        catch (Exception e)
        {
            errorMessage = $"Unexpected error: {e.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}



using Microsoft.AspNetCore.Components.WebAssembly.Hosting;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Net.Http;
using System.Threading.Tasks;

namespace BlazorSearchApp
{
    public class Program
    {
        public static async Task Main(string[] args)
        {
            var builder = WebAssemblyHostBuilder.CreateDefault(args);
            builder.RootComponents.Add<App>("#app");
            builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });

            await builder.Build().RunAsync();
        }
    }
}


<NavLink class="nav-link" href="search">
    <span class="oi oi-magnifying-glass" aria-hidden="true"></span> Search
</NavLink>




@page "/search"
@inject HttpClient Http

<h3>Search API</h3>

<div>
    <input @bind="searchQuery" placeholder="Enter search query" />
    <input type="checkbox" @bind="includeDetails" /> Include Details
    <button @onclick="Search">Search</button>
</div>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: red;">@errorMessage</p>
}
else if (result != null)
{
    <div>
        <h4>Results:</h4>
        <p><strong>Name:</strong> @result.Name</p>
        <p><strong>Description:</strong> @result.Description</p>
    </div>
}

@code {
    private string searchQuery;
    private bool includeDetails;
    private SearchResult result;
    private bool isLoading;
    private string errorMessage;

    private async Task Search()
    {
        isLoading = true;
        errorMessage = null;
        result = null;

        try
        {
            var searchRequest = new SearchRequest
            {
                Query = searchQuery,
                IncludeDetails = includeDetails
            };

            // Replace "https://api.example.com/search" with your actual API endpoint
            var response = await Http.PostAsJsonAsync("https://api.example.com/search", searchRequest);

            response.EnsureSuccessStatusCode();

            // Deserialize the JSON response to the SearchResult object
            result = await response.Content.ReadFromJsonAsync<SearchResult>();
        }
        catch (HttpRequestException e)
        {
            errorMessage = $"Request error: {e.Message}";
        }
        catch (Exception e)
        {
            errorMessage = $"Unexpected error: {e.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}


public class SearchRequest
{
    public string Query { get; set; }
    public bool IncludeDetails { get; set; }
}


<NavLink class="nav-link" href="search">
    <span class="oi oi-magnifying-glass" aria-hidden="true"></span> Search
</NavLink>
